#NOP map

#VARIABLE {_map_error_li} {<199><FAA><fff> ! MAP ERROR ! <799>};
#VARIABLE {_map_debug_li} {<199><FFA><aaa> :MAP DEBUG: <799>};

#VARIABLE {_map_enabled} 0;
#VARIABLE {_map_file} {../data/mg.map};

#MACRO {\e[15~} {#MAP write $_map_file};

#FUNCTION {map_room_setup}
{
	@DEBUG_func_start{map_room_setup;{%0}};

	#VARIABLE {_mrs_room} {%0};
	@DEBUG_var{_mrs_room};

	#IF {! ${_map_enabled}}
	{
		@map_init{};

		#MAP list {roomid} {${_mrs_room[id]}} {variable} {_found_rooms};
		@DEBUG_msg{looking for current room ID: ${_mrs_room[id]}};
		#FOREACH {*{_found_rooms[]}} {_room_vnum}
		{
			@DEBUG_msg{found room ${_room_vnum}};
			#MAP GOTO $_room_vnum;
			#BREAK;
		};
		#UNVARIABLE {_found_rooms};
	};

	#MAP get roomid {_mrs_map_roomid};
	@DEBUG_var{_mrs_map_roomid};

	#IF { "${_mrs_map_roomid}" == "" }
	{
		#NOP new room;
		#MAP set roomname {${_mrs_room[short]}};
		#MAP set roomid {${_mrs_room[id]}};

		#MAP get roomsymbol {_mrs_map_roomsymbol};
		@DEBUG_var{_mrs_map_roomsymbol};
		#IF {"${_mrs_map_roomsymbol}"=="?"}
		{
			#MAP set roomsymbol {};
		};
		#UNVARIABLE {_mrs_map_roomsymbol};

		#MAP get roomexits {_mrs_map_roomexits};
		@DEBUG_var{_mrs_map_roomexits};

		#FOREACH {${_mrs_room.exits[%*]}} {_mrs_room_exit}
		{
			@DEBUG_var{_mrs_room_exit};

			@DEBUG_var{_mrs_map_roomexits[${_mrs_room_exit}]};
			#IF {${_mrs_map_roomexits[${_mrs_room_exit}]}}
			{
				#NOP already known room;
				#SHOWME {${_map_debug_li} known exit: ${_mrs_room_exit} };
			}
			{
				#NOP new unknown room;
				#MAP dig {${_mrs_room_exit}};

				#MAP get roomexits {_mrs_map_roomexits};
				@DEBUG_var{_mrs_map_roomexits};

				#VARIABLE {_mrs_map_roomexit_vnum} {${_mrs_map_roomexits[${_mrs_room_exit}]}};
				@DEBUG_var{_mrs_map_roomexit_vnum};

				#MAP set roomsymbol {?} {${_mrs_map_roomexit_vnum}};
				#UNVARIABLE {_mrs_map_roomexit_vnum}
			};
		};
		#UNVARIABLE {_mrs_room_exit};

		#UNVARIABLE {_mrs_map_roomexits};
	} {
		#NOP already known room;
		@DEBUG_msg{${_map_debug_li} known room: ${_mrs_map_roomid}};
		#IF {"${_mrs_map_roomid}"!="${_mrs_room[id]}"}
		{
			#SHOWME {${_map_error_li} room mismatch \n map: ${_mrs_map_roomid} \n mud: ${_mrs_room[id]}};
		};
		#IF {"${_last_room_vnum}"!="${_mrs_room[vnum]}"}
		{
			#IF {"${_last_room_id}"=="${_mrs_room[id]}"}
			{
				#SHOWME {${_map_error_li} new room created with same id as last one - undo map action};
				#MAP UNDO;
			};
		};
	};

	#VARIABLE {_last_room_vnum} ${_mrs_room[vnum]};
	#VARIABLE {_last_room_id} ${_mrs_room[id]};

	#UNVARIABLE {_mrs_map_roomid};
	#UNVARIABLE {_mrs_room};

	@DEBUG_func_end{map_room_setup};
	#RETURN {#NOP};
};

#FUNCTION {map_init}
{
	@DEBUG_func_start{map_init;{%0}};

	#SPLIT 16 1;
	#MAP create 20000;
	#MAP read $_map_file;
	#MAP goto 1;
	#MAP flag asciigraphics on;
	#MAP flag vtmap on;

	#VARIABLE {_map_enabled} 1;

	@DEBUG_func_end{map_init};
	#RETURN {#NOP};
};

#EVENT {VARIABLE UPDATE gmcp_room}
{
	@DEBUG_event_start{VARIABLE UPDATE gmcp_room};
	@map_room_setup{%1[info]};
	@DEBUG_event_end{VARIABLE UPDATE gmcp_room};
};
